#!/usr/bin/env python

# import plotly.plotly as py
import plotly.graph_objs as go
from plotly.offline import plot
import csv
import os
import sys
import plotly.io as pio

path = "/Users/stas/Projects/schelling/misc/results_csv/"
files = os.listdir(path)

tolerances = ['0'] + [str(x)+'/8' for x in range(1,8)] + ['1'] #[0.125 * x for x in range(9)]

tols = [x/8 for x in range(0,9)]
tol_pairs = [(tol1, tol2) for tol1 in tols for tol2 in tols if tol2 > tol1]
tolerances_mut = [str(tol1)+"_"+str(tol2) for tol1, tol2 in tol_pairs]

tol_pairs_all = [(tol1, tol2) for tol1 in tols for tol2 in tols]
# tolerances_mut_all = [str(tol1)+"_"+str(tol2) for tol1, tol2 in tol_pairs_all]
tolerances_mut_all = [str(int(tol1*8))+"/8"+", "+str(int(tol2*8))+"/8" for tol1, tol2 in tol_pairs_all]
tolerances_mut_all = [T.replace("8/8","1").replace("0/8","0") for T in tolerances_mut_all]

vacancy_proportions = [x for x in range(100)] # do not use v=1.0

imwidth = 800

def get_line(T, v, pos):
	v = float(v)
	T = float(T)
	s = list()
	if "t" in pos:
		s.append(dict(type='line',
			xref='x',
			yref='y',
			x0=v-0.5,
			x1=v+0.5,
			y0=T*8+0.5,
			y1=T*8+0.5,
			yanchor='top',
			))
	if "l" in pos:
		s.append(dict(type='line',
			xref='x',
			yref='y',
			x0=v-0.5,
			x1=v-0.5,
			y0=T*8-0.5,
			y1=T*8+0.5,
			yanchor='top',
			xanchor='left'
			))
	return s

def get_line_mut(T, v, pos):
	v = float(v)
	T = [float(t)*8 for t in T.split("_")]
	Taxis = T[0]*9 + T[1]
	s = list()
	if "t" in pos:
		if "td" in pos:
			style = "dot"
		elif "tg" in pos:
			style = "solid"
		else:
			style = "solid"
		s.append(dict(type='line',
			xref='x',
			yref='y',
			x0=v,
			x1=v+1,
			y0=Taxis+0.5,
			y1=Taxis+0.5,
			yanchor='top',
			line={"dash":style},
			))
	if "l" in pos:
		if "ld" in pos:
			style = "dot"
		elif "lg" in pos:
			style = "solid"
		else:
			style = "solid"
		s.append(dict(type='line',
			xref='x',
			yref='y',
			x0=v,
			x1=v,
			y0=Taxis-0.5,
			y1=Taxis+0.5,
			yanchor='top',
			xanchor='left',
			line={"dash":style},
			))
	return s


for file in files:
	if file[-4:] != ".csv":
		continue
	excluded = ["satisfied_percent_mut_all.csv", "satisfied_percent3.csv", "satisfied_percent4.csv"]
	if file in excluded:
		continue

	# if file == "results3.csv" or file == "results4.csv":
	# 	imwidth = 400

	if "mut" in file:
		# continue
		if "mut_all" in file:
			# continue
			imheight = 1100
			tolerance_list = tolerances_mut_all
			lines = ["1, 0", "7/8, 0", "6/8, 0", "5/8, 0", "4/8, 0", "3/8, 0", 
				"2/8, 0", "1/8, 0"]
		else:
			continue
			imheight = 800
			tolerance_list = tolerances_mut
			lines = ["0.875_1.0", "0.75_0.875", "0.625_0.75", "0.5_0.625", 
			"0.375_0.5", "0.25_0.375", "0.125_0.25"]


		indices = [tolerance_list.index(y) - 0.5 for y in lines]
		shapes=[
				dict(type='line',
					xref='x',
					yref='y',
					x0=-0.5,
					x1=99.5,
					y0=liney,
					y1=liney,
					yanchor='top',
					)
				for liney in indices
		]
	else:
		# continue
		tolerance_list = tolerances
		imheight = 420
		shapes = []


	name = file[:-4]
	file = path + file
	
	data = list()

	with open(file, newline='') as f:
		reader = csv.reader(f)
		try:
			for row in reader:
				data_row = [float(p) for p in row]
				data.append(data_row[:-1])
		except csv.Error as e:
			sys.exit('file {}, line {}: {}'.format(file, reader.line_num, e))

	if "satisfied_percent" in name:
		scale = 'Greens'
		reverse_scale = False
		bar_title = "← unsatisfied | satisfied →"
		zmin=0
		zmax=100
	else:
		scale = 'Reds'
		reverse_scale = True
		bar_title = "← segregated |   <i>Uᵣ</i>   | integrated →"
		zmin=0.0
		zmax=0.8

	title_font = dict(family='Arial', size=20)
	tick_font=dict(family='Arial', size=14)
	annotation_font=dict(family='Arial', size=16, color='black')


	trace = go.Heatmap(z=data,
					   x=vacancy_proportions,
					   y=tolerance_list,
					   colorscale=scale,
					   reversescale=reverse_scale,
					   colorbar=dict(
						title=bar_title,
						titleside="right",
						titlefont=title_font,
						tickfont=tick_font,
					   ),
					   zmin=zmin,
					   zmax=zmax)



	annotation_data_2 = [
		(10, '2/8', 'a'),
		(14, '2/8', 'b'),
		(40, '2/8', 'c'),
		(2, '3/8', 'd'),
		(6, '3/8', 'e'),
		(40, '3/8', 'f'),
		(2, '5/8', 'g'),
		(10, '5/8', 'h'),
	]

	annotation_data_3 = [
		(1, '4/8', 'a'),
		(4, '4/8', 'b'),
		(25, '4/8', 'c'),
	] 

	annotation_data_4 = [
		(5, '4/8', 'd'),
		(8, '4/8', 'e'),
		(25, '4/8', 'f'),
	] 

	annotation_data_mut = [
		(10, '1, 2/8', 'F-MU', '2'),
		(80, '1, 4/8', 'MU-MU'),

		(10, '7/8, 2/8', 'F-MU', '2'),
		(80, '7/8, 4/8', 'MU-MU'),

		(0.5, '6/8, 7/8', 'F-MU', 50, 0),
		(0.75, '6/8, 0', 'F-F', 25, -40),
		(14, '6/8, 1/8', 'F-MU', '2'),
		(80, '6/8, 4/8', 'MU-MU'),

		(4.5, '5/8, 7/8', 'F-MU', 50, 0),
		(2, '5/8, 1/8', 'F-F', 18, -22),
		(14, '5/8, 1/8', 'F-MU', '2'),
		(80, '5/8, 4/8', 'MU-MU'),

		(6, '4/8, 7/8', 'F-MU'),
		(2.5, '4/8, 1/8', 'F-F', 0, 3, '2'),
		(18, '4/8, 1/8', 'F-MU'),
		(80, '4/8, 4/8', 'MU-MU'),

		(8, '3/8, 6/8', 'F-MU'),
		(4, '3/8, 1/8', 'F-F', '2'),
		(33, '3/8, 1/8', 'F-MU', 0, 5),
		(80, '3/8, 4/8', 'MU-MU'),

		(14, '2/8, 6/8', 'F-MU'),
		(6, '2/8, 1/8', 'F-F', 0, -3, '2'),
		(30.5, '2/8, 1/8', 'F-MU', 0, 5),
		(80, '2/8, 4/8', 'MU-MU'),

		(27, '1/8, 5/8', 'F-MU'),
		(8, '1/8, 2/8', 'F-F', 0, 7, '12'),
		(54, '1/8, 0', 'F-MU', 0, -30),
		(80, '1/8, 4/8', 'MU-MU'),

		(46, '0, 5/8', 'F-MU'),
		(8, '0, 2/8', 'F-F', '12'),
		(80, '0, 4/8', 'MU-MU'),
	]

	if name == "results4":
		annotation_data = annotation_data_4
	elif name == "results3":
		annotation_data = annotation_data_3
	elif name == "results2":
		annotation_data = annotation_data_2
	elif "mut_all" in name:
		annotation_data = annotation_data_mut
	else:
		annotation_data = []

	annotations=list()


	for annotation_point in annotation_data:
		font = annotation_font

		if (len(annotation_point) == 4 or len(annotation_point) == 6) and "satisfied_percent_mut_all" in name:
			if name[-1] in annotation_point[-1]:
				font=dict(family='Arial', size=16, color='#E0E0E0')

		if len(annotation_point) <= 4:
			annotation = go.layout.Annotation(
				x=annotation_point[0],
				y=annotation_point[1],
				text='<b>'+annotation_point[2]+'</b>',
				showarrow=False,
				font=font
			)
		else:
			annotation = go.layout.Annotation(
				x=annotation_point[0],
				y=annotation_point[1],
				text='<b>'+annotation_point[2]+'</b>',
				showarrow=True,
				arrowhead=0,
				ax=annotation_point[3],
				ay=annotation_point[4],
				font=font
			)

		annotations.append(annotation)

	data_file = {
			"results2": "phase.data2",
			"satisfied_percent2": "phase.data2",
			"results3": "phase.data3",
			"satisfied_percent3": "phase.data3",
			"results4": "phase.data4",
			"satisfied_percent4": "phase.data4",
		}

	if name in data_file.keys():
		df = data_file[name]
		with open(os.path.join(path, df)) as phase_data_file:
			for data_line in phase_data_file.readlines():
				s = get_line(*data_line.split(" "))
				shapes+=s

	if "mut_all" in name:
		df = "phase.data.mut"
		with open(os.path.join(path, df)) as phase_data_file:
			for data_line in phase_data_file.readlines():
				s = get_line_mut(*data_line.split(" "))
				shapes+=s

	layout = go.Layout(
		# title=name,
		xaxis=dict(
			title='Vacancy Proportion (<i>v</i>) [%]',
			titlefont=title_font,
			tickfont=tick_font,
		),
		yaxis=dict(
			title='Agent Tolerance (<i>T</i>)',
			titlefont=title_font,
			tickfont=tick_font,
			tickmode="linear"
		),
		font=dict(family='Arial', size=12),
		annotations=annotations,
		shapes=shapes,
		margin=go.layout.Margin(
		l=80,
		r=80,
		b=80,
		t=30,
	),
	)

	fig = go.Figure(data=[trace], layout=layout)
	
	name = name.replace("mut_all", "vt")
	html_path = "/Users/stas/Projects/schelling/misc/results_html/"
	html_name = os.path.join(html_path, name+".html")
	png_name = name

	# plot(fig, filename=html_name, image='png', image_filename=png_name,
	# 		  image_width=800, image_height=imheight, auto_open=True)

	plot(fig, filename=html_name, auto_open=False)

	pio.write_image(fig, "/Users/Stas/Downloads/" + name + ".pdf", width=imwidth, height=imheight)
	# pio.write_image(fig, "/Users/Stas/Downloads/" + name + ".png", width=imwidth, height=imheight)
	print(name)

