#!/usr/bin/env python

# import plotly.plotly as py
import plotly.graph_objs as go
from plotly.offline import plot
import csv
import os
import sys
import string

path = "/Users/stas/Projects/schelling/misc/results_csv/"
files = os.listdir(path)

tolerances = ['0'] + [str(x)+'/8' for x in range(1,8)] + ['1'] #[0.125 * x for x in range(9)]

tols = [x/8 for x in range(0,9)]
tol_pairs = [(tol1, tol2) for tol1 in tols for tol2 in tols if tol2 > tol1]
tolerances_mut = [str(tol1)+"_"+str(tol2) for tol1, tol2 in tol_pairs]

tol_pairs_all = [(tol1, tol2) for tol1 in tols for tol2 in tols]
tolerances_mut_all = [str(tol1)+"_"+str(tol2) for tol1, tol2 in tol_pairs_all]

vacancy_proportions = [x for x in range(100)] # do not use v=1.0

for file in files:
	if file[-4:] != ".csv":
		continue

	if "mut" in file:
		if "mut_all" in file:
			imheight = 1150
			tolerance_list = tolerances_mut_all
			lines = ["1.0_0.0", "0.875_0.0", "0.75_0.0", "0.625_0.0", "0.5_0.0", 
			"0.375_0.0", "0.25_0.0", "0.125_0.0"]
		else:
			continue
			imheight = 800
			tolerance_list = tolerances_mut
			lines = ["0.875_1.0", "0.75_0.875", "0.625_0.75", "0.5_0.625", 
			"0.375_0.5", "0.25_0.375", "0.125_0.25"]


		indices = [tolerance_list.index(y) - 0.5 for y in lines]
		shapes=[
				dict(type='line',
					xref='x',
					yref='y',
					x0=-0.5,
					x1=99.5,
					y0=liney,
					y1=liney,
					yanchor='top',
					)
				for liney in indices
		]
	else:
		continue
		tolerance_list = tolerances
		imheight = 600
		shapes = []

	name = file[:-4]
	file = path + file
	
	data = list()


	with open(file, newline='') as f:
		reader = csv.reader(f)
		try:
			for row in reader:
				data_row = [float(p) for p in row]
				data.append(data_row[:-1])
		except csv.Error as e:
			sys.exit('file {}, line {}: {}'.format(file, reader.line_num, e))

	if "satisfied_percent" in name:
		scale = 'Greens'
		reverse_scale = False
		bar_title = "← unsatisfied | satisfied →"
	else:
		scale = 'Reds'
		reverse_scale = True
		bar_title = "← segregated |   <i>Uᵣ</i>   | integrated →"

	title_font = dict(family='Serif', size=18)
	tick_font=dict(family='Serif', size=10)
	annotation_font=dict(family='Serif', size=16)


	trace = go.Heatmap(z=data,
					   x=vacancy_proportions,
					   y=tolerance_list,
					   colorscale=scale,
					   reversescale=reverse_scale,
					   colorbar=dict(
						title=bar_title,
						titleside="right",
						titlefont=title_font,
					   ),)



	annotation_data_2 = [
		(10, '2/8', ),
		(13, '2/8', ),
		(40, '2/8'),
		(2, '3/8'),
		(5, '3/8'),
		(40, '3/8'),
		(1, '5/8'),
		(10, '5/8'),
	]

	annotation_data_3 = [
		(2, '4/8'),
		(4, '4/8'),
		(25, '4/8'),
	] 

	annotation_data_4 = [
		(5, '4/8'),
		(7, '4/8'),
		(25, '4/8'),
	] 


	if "4" in name and not "mut" in name:
		annotation_data = annotation_data_4
	elif "3" in name and not "mut" in name:
		annotation_data = annotation_data_3
	elif "2" in name and not "mut" in name:
		annotation_data = annotation_data_2
	else:
		annotation_data = []

	annotations=list()

	letters = list(string.ascii_lowercase)

	for annotation_point in annotation_data:
		annotation = go.Annotation(
			x=annotation_point[0],
			y=annotation_point[1],
			text='<b>'+letters.pop(0)+'</b>',
			showarrow=False,
			font=annotation_font
		)
		annotations.append(annotation)


	# phase annotations
	if "mut_all" in name:
		with open(os.path.join(path, "phase.data")) as phase_data_file:
			for line in phase_data_file.readlines():
				phase_data_point = line.split(",")
				annotation = go.Annotation(
					x=phase_data_point[1],
					y=phase_data_point[0],
					text=phase_data_point[2],
					showarrow=False,
					font=annotation_font
					)
				annotations.append(annotation)

	layout = go.Layout(
		# title=name,
		xaxis=dict(
			title='Vacancy Proportion (<i>v</i>) [%]',
			titlefont=title_font,
			tickfont=tick_font,
		),
		yaxis=dict(
			title='Agent Tolerance (<i>T</i>)',
			titlefont=title_font,
			tickfont=tick_font,
			tickmode="linear"
		),
		font=dict(family='Serif', size=12),
		annotations=annotations,
		shapes=shapes
	)

	fig = go.Figure(data=[trace], layout=layout)

	html_path = "/Users/stas/Projects/schelling/misc/results_html/"
	html_name = os.path.join(html_path, name+".html")
	png_name = name

	plot(fig, filename=html_name, image='png', image_filename=png_name,
			  image_width=800, image_height=imheight, auto_open=True)
	# import time
	# time.sleep(5)
