#!/usr/bin/env python
import sys

satisfied_mut_all1_csv = sys.argv[1]
satisfied_mut_all2_csv = sys.argv[2]

tols = [x/8 for x in range(0,9)]
tol_pairs_all = [(tol1, tol2) for tol1 in tols for tol2 in tols]

vacancy_proportions = [round(0.01 * x, 2) for x in range(100)]

def main(): 
	
	satisfied1_all = dict()
	satisfied2_all = dict()

	with open(satisfied_mut_all1_csv) as csvf:
		lines_mut1 = iter(csvf.readlines())

	with open(satisfied_mut_all2_csv) as csvf:
		lines_mut2 = iter(csvf.readlines())

	

	for T in tol_pairs_all:
		line1 = next(lines_mut1)
		vals1 = [float(v) for v in line1.split(",")]
		satisfied1_all[T] = vals1

		line2 = next(lines_mut2)
		vals2 = [float(v) for v in line2.split(",")]
		satisfied2_all[T] = vals2

	values = dict()

	for T in tol_pairs_all:
		values[T] = list(range(100))
		for v in range(100):
			if satisfied1_all[T][v] >= 99.0 and satisfied2_all[T][v] >= 99.0:
				values[T][v] = "ss"
				# print(str(T[0])+"_"+str(T[1])+","+str(v)+",â—‹")
			elif satisfied1_all[T][v] < 99.0 and satisfied2_all[T][v] < 99.0:
				values[T][v] = "ff"
				# print(str(T[0])+"_"+str(T[1])+","+str(v)+",*")
			elif satisfied1_all[T][v] >= 99.0 and satisfied2_all[T][v] < 99.0:
				values[T][v] = "sf"
			elif satisfied1_all[T][v] < 99.0 and satisfied2_all[T][v] >= 99.0:
				values[T][v] = "sf"


	for T in tol_pairs_all:
		for v in range(100):
			val = values[T][v]
			if v > 0:
				left = values[T][v - 1]
			else:
				left = val
	
			if T[1] < 1:
				top = values[(T[0], T[1] + 0.125)][v]
			else:
				top = val

			lines = ""
			if val != left:
				lines += "l"
				pair = set((val, left))
				# frozen-eq - solid line
				if pair == set(("ff", "ss")):
					lines += "s"
				elif pair in [set(("ss", "sf")), set(("ff", "sf"))]:
					lines += "d"
				
			if val != top:
				lines += "t"
				pair = set((val, top))
				# frozen-eq - solid line
				if pair == set(("ff", "ss")):
					lines += "s"
				elif pair in [set(("ss", "sf")), set(("ff", "sf"))]:
					lines += "d"

			if lines:
				print(str(T[0])+"_"+str(T[1])+" "+str(v)+" "+lines)

	# for T in tol_pairs_all:
	# 	print(",".join(values[T]))




if __name__ == '__main__':
	main()