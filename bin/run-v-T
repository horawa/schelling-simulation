#! /usr/bin/env python
from schelling.simulation_settings import SimulationSettings
import schelling.utility_functions as ut
import os
import schelling.simulation as sim
import sys
import multiprocessing
import datetime

# argv[1] is thread count (default=8)
def log(text):
	log_file = open(os.path.join(result_dir, "log.txt"), "a+")
	log_file.write("[" + str(datetime.datetime.now()) +"] " + text + "\n")
	log_file.close()
	# print(text)


def run(settings):
	output_dir = settings[0]
	settings = settings[1]

	log("Running: " + output_dir)

	os.makedirs(output_dir, exist_ok=True)

	callback = sim.get_save_state_callback(
		output_dir, settings.iterations)
	
	settings_file = open(os.path.join(output_dir, "settings.txt"), 'w')
	settings_file.write(str(settings))
	settings_file.close()
	
	# create utility function here: workaround for 'Cant pickle local object'.
	settings.utility_function = ut.create_flat_utility(
		settings.utility_function)
	
	sim.run_simulation(settings, callback)
	log("Done: " + output_dir)

result_dir = os.path.join(os.path.expanduser("~"), "results")

tolerances = [0.125 * x for x in range(9)]
vacancy_proportions = [round(0.01 * x, 2) for x in range(101)]

settings = [(
	os.path.join(result_dir, "v_"+str(v), "T_"+str(T), str(test_no)),
	SimulationSettings(grid_size=100,
		vacancy_proportion=v,
		agent_proportions=(0.5, 0.5),
		initial_random_allocation=True,
		utility_function=T,
		satisficers=False,
		agent_picking_regime='random',
		vacancy_picking_regime='random',
		agent_roulette_base_weight=None,
		vacancy_roulette_base_weight=None,
		radius=1,
		count_vacancies=True,
		segregation_measure_names=['entropy_average', 'clusters', 
			'unlike_neighbor_fraction_average'],
		iterations=5000,
		save_period=100) 
	) for v in vacancy_proportions for T in tolerances for test_no in range(10)]

if __name__ == '__main__':
	#touch log file
	os.makedirs(result_dir, exist_ok=True)

	if len(sys.argv) != 2:
		threads = 8
	else:
		threads = sys.argv[1]

	pool = multiprocessing.Pool(threads)
	pool.map(run, settings)

