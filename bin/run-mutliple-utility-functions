#!/usr/bin/env python
from schelling.simulation_settings import SimulationSettings
import schelling.utility_functions as ut
import os
import schelling.simulation as sim
import sys
import multiprocessing
import datetime

# argv[1] is thread count (default=8)
# argv[2] is agent count (default=2)

def log(text, print_to_console=True):
	log_file = open(os.path.join(result_dir, "log.txt"), "a+")
	
	message = "[" + str(datetime.datetime.now()) +"] " + text + "\n"
	
	if print_to_console:
		print(message)
	
	log_file.write(message)
	log_file.close()


def run(settings):
	output_dir = settings[0]
	settings = settings[1]

	log("Running: " + output_dir)

	os.makedirs(output_dir, exist_ok=True)

	callback = sim.get_save_state_callback(
		output_dir, settings.iterations)
	
	settings_file = open(os.path.join(output_dir, "settings.txt"), 'w')
	settings_file.write(str(settings))
	settings_file.close()
	
	# create utility function here: workaround for 'Cant pickle local object'.
	utfs = [ut.create_flat_utility(tol) for tol in settings.utility_function]
	settings.utility_function = utfs
	
	sim.run_simulation(settings, callback)
	log("Done: " + output_dir)

check = False


if len(sys.argv) < 2:
	threads = 8
else:
	if sys.argv[1] == "check":
		check = True
	else:
		threads = int(sys.argv[1])

if len(sys.argv) < 3:
	agents = 2
else:
	agents = int(sys.argv[2])


results_name = "results_mut"
if agents != 2:
	results_name += str(agents)
result_dir = os.path.join(os.path.expanduser("~"), results_name)

tolerances = [[1/8,7/8], [2/8,6/8], [3/8,5/8]]
vacancy_proportions = [round(0.01 * x, 2) for x in range(101)]

settings = [(
	os.path.join(result_dir, "v_"+str(v), "T_"+str(T[0])+"_"+str(T[1]),
	 str(test_no)), SimulationSettings(grid_size=100,
		vacancy_proportion=v,
		agent_proportions=tuple(1/agents for _ in range(agents)),
		initial_random_allocation=True,
		utility_function=T,
		satisficers=False,
		agent_picking_regime='random',
		vacancy_picking_regime='random',
		agent_roulette_base_weight=None,
		vacancy_roulette_base_weight=None,
		radius=1,
		count_vacancies=True,
		segregation_measure_names=[
			'unlike_neighbor_fraction_average_ncv'],
		iterations=10000,
		save_period=100) 
	) for v in vacancy_proportions for T in tolerances for test_no in range(10)]

if __name__ == '__main__':
	#touch log file
	os.makedirs(result_dir, exist_ok=True)




	# if len(sys.argv) < 4:
	# 	start = 0
	# 	end = len(settings)
	# else:
	# 	start = int(sys.argv[2])
	# 	end = int(sys.argv[3])


	if check:
		with open(os.path.join(result_dir, "log.txt")) as log_file:
			log_lines = log_file.readlines()

		started_lines = list( 
			map(lambda l: l.split(": ")[1],
				filter(lambda line: "Running:" in line,
					log_lines)))

		done_lines = list( 
			map(lambda l: l.split(": ")[1],
				filter(lambda line: "Done:" in line,
					log_lines)))

		not_done = list(
			filter(lambda l: l not in done_lines,
				started_lines))

		settings_dirs = list(map(lambda l: l[0], settings))

		not_done_settings = list(
			filter(lambda l: l not in settings_dirs,
				done_lines))

		print("\n".join(settings_dirs))
		
	else:
		pool = multiprocessing.Pool(threads)
		pool.map(run, settings)

